# SHM v1 API
FORMAT: 1A

## About SHM

TODO

## API Requests

TODO
## Modify Login form

TODO

## Return codes

HTTP 401, 403, 500, 
503 - Restart in progress
TODO

## Your own theme recomendations

Our theme is free under GNU license, you can modify and use them at your own themes.
We used AngularJS and Bootstrap for them.

For using your own theme just upload theme files to `html/MyOwnTheme` folder inside panel homedir and
add theme name to main config `etc/main.conf` at `[Core]` section to `Themes`.
First theme in the list will be default theme for all users. Default language is `EN`.

For example: 
```
[Core]
Themes = ["MyOwnTheme", "Simple"]
```
Service restart needed to reload config.



# Data Structures

## Error (object)
+ error (required,object)

## Files (object)
+ Dir (required, boolean) - Is dir.
+ Name (required, string) - Name of the dir or file.
+ Size (required, number) - Size in bytes.
+ Permissions (required, number) - Permissions.
+ Owner (required, number) - Owner of file or dir.
+ Group (required, number) - Group of file or dir.
+ Modified (required, string) - Date time of last modification.



# Group Remove testing user regularUser

## #AuthRoot for testing user removing [POST /login]

+ Request (application/json)
        {
            "Login": "root",
            "Password": "$ROOT_PASSWORD"
        }

+ Response 200 (application/json)
        {
            "Auth": "Logged",
            "Theme": "Simple",
            "Language": "EN"
        }


## Removing testing user regularUser [POST /api/users/del]

+ Request (application/json)
        {  
            "Name":"$USER_NAME"
        }

+ Response 204 (text/plain)

## Logout from Root [GET /logout]

+ Response 204 (text/plain)



# Group Create regularUser for tests

## #AuthRoot for testing user creation [POST /login]

+ Request (application/json)
        {
            "Login": "root",
            "Password": "$ROOT_PASSWORD"
        }

+ Response 200 (application/json)
        {
            "Auth": "Logged",
            "Theme": "Simple",
            "Language": "EN"
        }

## Create testing user regularUser [POST /api/users/set]

+ Request (application/json)
        {  
            "Username":"$USER_NAME",
            "Password":"$USER_PASSWORD",
            "Info":{  
                "Active":true,
                "Comment":"Just a testing user",
                "Template":"SimpleUser",
                "Email":"root@localhost",
                "Theme":"Alpha",
                "Language":"EN",
                "HOTP":{  
                    "Active":false
                }
            }
        }

+ Response 204 (text/plain)

## Logout from Root [GET /logout]

+ Response 204 (text/plain)



# Group Panel Authorization

First of all you must login into panel as `root` to gain administrator privileges or as a regular user.
For login you must use your credentials of user or root login and password if you are the server administrator.
## User login [/login]
For login you must use your credentials of a user that was registered by the `root` in a panel.

+ Attributes
    + Login (required,string) - User's login, which is email or root for admin.
    + Password (required,string) - User defined password or root password for admin.
    + Hotp (optional, string) - Code from two step authorization app.
    + Auth (string) - Authorization status.

### Login fails [POST]
If login and password is not correct you will receive `403 Forbidden`. 
Debug information about login, user not found or wrong password are in the system's log file.

+ Request (application/json)
        {
        "Login": "$USER_NAME",
        "Password": "wrongUserPassword"
        }

+ Response 403 (application/json)
        {
            "Auth": "Denied"
        }

### Login success #AuthUser [POST]
If login and(or) password is correct you will receive success login response with
`Theme` is a GUI theme, `Language` is a user defined interface language.
Login script do redirect to `https://server:port/Theme` to load GUI for theme.


+ Attributes
    + Theme:Simple (required, string) - User defined GUI theme.
    + Language:EN (required, string) - User defined language for GUI.

+ Request (application/json)
        {
            "Login": "$USER_NAME",
            "Password": "$USER_PASSWORD"
        }

+ Response 200 (application/json)
        {
            "Auth": "Logged",
            "Theme": "Simple",
            "Language": "EN"
        }
### HOTP code required [POST]

How to [turn on two step authorization](two-step-authorization)
If user turned on two step authorization from Google Authenticator or other HOTP compatible mobile app, 
HOTP code must be present along with login and password fields.
You need to repeat login request with HOTP code from user's mobile app.

+ Request (application/json)
        {
            "Login": "hotpUser",
            "Password": "hotpUserSecretPassword"
        }

+ Response 449 (application/json)
        {
            "Auth": "HOTP required"
        }
 
### Login with HOTP success [POST]

If HOTP code from user's app correct, you'll receive `200` and `Login success` reply.

+ Attributes
    + HOTP (required, string) - Code from device for two step authorization.

+ Request (application/json)
        {
            "Login": "hotpUser",
            "Password": "hotpUserSecretPassword",
            "Hotp":"12345"
        }

+ Response 200 (application/json)
        {
            "Auth": "Logged",
            "Theme": "Simple",
            "Language": "EN"
        }


### Login fails because HOTP wrong code [POST]
In case of wrong HOTP code `403` would be received. 
You can send another request with correct HOTP code.

+ Request (application/json)
        {
            "Login": "hotpUser",
            "Password": "hotpUserSecretPassword",
            "Hotp":"54321"
        }

+ Response 403 (application/json)
        {
            "Auth": "HOTP wrong code"
        }
## Root login [/login]
For login you must use your root system password and login `root`.

### Root login fails [POST]
If password is not correct you will receive `403 Forbidden`. 

+ Request (application/json)
        {
        "Login": "root",
        "Password": "wrongPassword"
        }

+ Response 403 (application/json)
        {
            "Auth": "Denied"
        }

### Root login success #AuthRoot [POST]

+ Attributes
    + Theme:Simple (required, string) - User defined GUI theme.
    + Language:EN (required, string) - User defined language for GUI.

+ Request (application/json)
        {
            "Login": "root",
            "Password": "$ROOT_PASSWORD"
        }

+ Response 200 (application/json)
        {
            "Auth": "Logged",
            "Theme": "Simple",
            "Language": "EN"
        }



# Group Create Test environment
Creating test environment.

## Add MySQL test user as #User [POST /api/mysql/users/set]
Add test user for PgSQL dumps.

+ Request (application/json)
        {  
        "Username":"DBUser1",
        "Password":"NewMyDBUserPassword",
        "Host":"localhost"
        }

+ Response 204 (text/plain)

## Add PgSQL test user as #User [POST /api/pgsql/users/set]
Add test user for PgSQL dumps.

+ Request (application/json)
        {  
            "Username":"DbTester",
            "Password":"NewMyDBTesterPassword"
        }

+ Response 204 (text/plain)

## Add PGSQL db for Import as #User [POST /api/pgsql/db/set]

+ Request (application/json)
        {  
            "DbName":"DbImport",
            "DbUser":"DbTester"
        }

+ Response 204 (text/plain)

## Create test.html file by Root [POST /api/filemanager/editfile]
Create /var/www/test.html by Root.

+ Request (application/json)
        {
            "Filename": "/var/www/test.html",
            "Encoding": "ISO 8859-2",
            "Text":"<h1>Hello world!</h1>"
        }

+ Response 204 (text/plain)

## Create /test.html file by #User [POST /api/filemanager/editfile]
Create /home/USER/test.html by User.

+ Request (application/json)
        {
            "Filename": "/test.html",
            "Encoding": "ISO 8859-2",
            "Text":"<h1>Hello world!</h1>"
        }

+ Response 204 (text/plain)

## Create from_root.html in user's dir by Root [POST /api/filemanager/editfile]

+ Request (application/json)
        {
            "Filename": "/home/regularUser/from_root.html",
            "Encoding": "ISO 8859-2",
            "Text":"<h3>Created by root!</h3>"
        }

+ Response 204 (text/plain)

## Create dirs for TAR archive testing as Root [POST /api/filemanager/mkdir]

+ Request (application/json)
        {
            "Dir":   "/var/www",
            "Mkdir": "test_archives/tar"
        }

+ Response 204 (text/plain)

## Create dirs for ZIP archive testing as Root [POST /api/filemanager/mkdir]

+ Request (application/json)
        {
            "Dir":   "/var/www",
            "Mkdir": "test_archives/zip"
        }

+ Response 204 (text/plain)

## Create dir for TAR archive testing as #User [POST /api/filemanager/mkdir]

+ Request (application/json)
        {
            "Dir":   "/www",
            "Mkdir": "test_archives/tar"
        }

+ Response 204 (text/plain)

## Add test.com domain as #User [POST /api/webdomains/set]

+ Request (application/json)
        {  
                "Name":"$TESTING_DOMAIN",
                "Active":true,
                "Alias":"www.$TESTING_DOMAIN site.$TESTING_DOMAIN",
                "Ip":"$SERVER_IP",
                "IndexFile":"index.html",
                "Encoding":"utf8",
                "Subdomains":true,
                "PHP":"fpm_nginx",
                "DNS":true,
                "SSL":false,
                "Analytics":true
        }

+ Response 204 (text/plain)

## Add info@test.com Email box as #User [POST /api/email/set]

+ Request (application/json)
    {  
       "Email":"info@$TESTING_DOMAIN",
       "Alias":"",
       "Size":500,
       "Password":"infoPassword"
    }

+ Response 204 (text/plain)

## Generate DKIM record for info@test.com as #User [POST /api/dkim/set]

+ Request (application/json)
    {  
       "Domain":"$TESTING_DOMAIN"
    }

+ Response 204 (text/plain)



# Group Two step authorization

For using two step authorization you can install **Google Authenticator** or other mobile app that support HOTP protocol.
There are two ways to add your app for two step authorization:
* Enter generated code at your mobile Google Authenticator app,
* Scan generated QR code on your mobile Google Authenticator app,

For proper QR generation you need to get code first and only after that make request to generate QR.
## Generate code for enter by hand [/api/hotp/code]

This request will generate one time code that you need to enter while add new account to Google Authenticator app.

### Getting key code [GET]
Generate one time key code.

+ Attributes
    + Key (required,string) - One time generated key for app binding.

+ Response 200 (application/json)
        {
            "Key": "12368615794617"
        }

## Generate QR [/api/hotp/qr]

This request will generate one time code that you need to save in your Google Authenticator app.

### Getting QR image with code [GET]
Generate PNG image with QR code you can scan by Google Authenticator to add account.

+ Response 200 (image/jpeg)
          

## Check for correct app binding [/api/hotp/check]

Before two step authorization cat be enabled we need to check if everything is good. 
You need to enter first generated code from your app.

### HOTP app Code correct [POST]

+ Request (application/json)
        {
            "Confirm": "95726283"
        }

+ Response 204 (text/plain)

### HOTP app Wrong code [POST]
If app was not binded properly, first code was not accepted.

+ Request (application/json)
        {
            "Confirm": "7324545"
        }

+ Response 406 (text/plain)

## HOTP toggle [/api/hotp/toggle]

!TODO




# Group User privileges templates

Every user in the panel has it own priveleges. Priveleges prevent unrestricted access to modules.
Using privileges prevent dedublicating same restrictions to users.
## Add or edit template [/api/utemplates/set]

Add or edit privileges template if template with that name already exists.

+ Attributes
    + Name (required, string) - Template name.
    + Modules (required, array) - List of modules which user can access.
    + SSH (required, boolean) - Allow SSH access to the server.
    + Limits.Diskspace (required, number) - Disk space quota in Megabytes.
    + Limits.Traffic (required, number) -  User traffic limit.
    + Limits.DBs (required, number) - Databases (MySQL, PgSQL, etc.) limit.
    + Limits.DBUsers (required, number) - Databases users (MySQL, PgSQL, etc.) limit.
    + Limits.FTPs (required, number) - FTP accounts limit.
    + Limits.WebDomains (required, number) - Web domains limit.
    + Limits.DNSDomains (required, number) - Limit domains in DNS server.
    + Limits.Emails (required, number) - Maximum email boxes.

### Add or edit [POST]

+ Request (application/json)
        {  
            "Name":"TestingTemplate",
            "Modules":[  
                "iptables",
                "ftp",
                "filemanager",
                "uploads"
            ],
            "SSH":true,
            "Limits":{  
                "Diskspace":100,
                "Traffic":101,
                "DBs":102,
                "DBUsers":103,
                "FTPs":104,
                "WebDomains":105,
                "DNSDomains":106,
                "Emails":107
            }
        }

+ Response 204 (text/plain)

## List all privileges templates [/api/utemplates/list]

Lists all existing users privileges templates.

+ Attributes
    + Used (required, number) - How many users using this privileges template.

### List [GET]

+ Response 200 (application/json)

        [  
            {  
                "Name":"TestingTemplate",
                "Modules":[  
                    "iptables",
                    "ftp",
                    "filemanager",
                    "uploads"
                ],
                "SSH":true,
                "Limits":
                {  
                    "Diskspace":100,
                    "Traffic":101,
                    "DBs":102,
                    "DBUsers":103,
                    "FTPs":104,
                    "WebDomains":105,
                    "DNSDomains":106,
                    "Emails":107
                },
                "Used":24
            }
        ]

## Delete privileges template [/api/utemplates/del]

Remove privileges template from the system. In case of some user can use removing template you must provide existing template to replace those was removing.

+ Attributes
    + ReplaceBy (required, string) - Template name which replaces removing template in case of some users using it.

### Delete [POST]

+ Request (application/json)
        {  
            "Name":"TestingTemplate",
            "ReplaceBy":"SimpleUser"
        }

+ Response 204 (text/plain)



# Group Users

Users can login to panel, have their own domains, databases, limited disk space, and etc.
Users in panel are system users too. They can have or haven't SSH access. Each user has its own privileges. 
For managing users privileges in panel we have such thing as "User Limits Templates". There is a templates with list of limits which can apply to one or more users. More information are in "User Templates" section.

Only user with login `root` or user with privileges template named `SuperAdmin` can add, edit or remove users!
## Add or edit user [/api/users/set]

If user with `Username` already exist new request will change parameters for him, 
otherwise new user with given `Username` will be added to system.

+ Attributes
    + Username (required,string) - User new or existing login name.
    + Password (optional,string) - Password for user. Leave blank if username already exist and you don't want to change the password.
    + Info (required) - User's information schema.
    + Info.Active (required,boolean) - Activate or deactivate user. Users in disabled state cannot login to panel.
    + Info.Template (required,string) - Privileges template apply for user.
    + Info.Comment (optional,string) - Comment about user.
    + Info.Email (required,string) - Email for information messages.
    + Info.Theme (optional,string) - GUI theme for user. First in themes list is a default.
    + Info.Language (optional,string) - Language for GUI. Default is `EN`.
    + Info.HOTP.Active (optional,boolean) - Enable or disable two step authorization for user account.


### Success [POST]
If all parameters are correct new user will be created or existing user modified.

+ Request (application/json)
        {  
            "Username":"Tester",
            "Password":"verysecretTesterPassword",
            "Info":{  
                "Active":true,
                "Comment":"Just a testing user",
                "Template":"SimpleUser",
                "Email":"root@localhost",
                "Theme":"Simple",
                "Language":"EN",
                "HOTP":{  
                    "Active":false
                }
            }
        }

+ Response 204 (text/plain)

### #Error [POST]
If there is wrong parameter in request you will get error message with some information.

+ Request (application/json)
        {  
            "Username":"Tester",
            "Password":"verysecretTesterPassword",
            "Info":
                {  
                "Active":false,
                "Comment":"Some wrong user",
                "Template":"TemplateThatNotExists",
                "Email":"root@localhost"
                }
        }

+ Response
## Set user password [/api/users/password]

You can change users password for panel and ssh access. `root` can change password for all users, regular users can change only own password.

+ Attributes
    + Name (required,string) - User name.
    + Password (optional,string) - New password.

### Success [POST]

+ Request (application/json)
        {  
            "Name":"Tester",
            "Password":"NewVerySecretTesterPassword"
        }

+ Response 204 (text/plain)
## Disable, enable users [/api/users/toggleactive]

Inactive users can not login into panel, webdomains are disabled too.
This request toggle user status from active to disabled or vice versa.

### Success [POST]

+ Request (application/json)
        {  
            "Name":"Tester"
        }

+ Response 204 (text/plain)
## Get users list [/api/users/list]

Return all users exists in panel and information.

### Success [GET]

+ Response 200 (application/json)
    [
            {
            "Username":"Tester",
            "Info":
                {
                "Active":false,
                "Created":"Tue Nov 17 00:00:00 EET 2015",
                "Comment":"Just a testing user",
                "Template":"SuperAdmin",
                "Email":"root@localhost",
                "Theme":"Simple",
                "Language":"EN",
                "HOTP":
                    {
                    "Active":false
                    }
                },
            "Limits":{},
            "Stats":{}
            }
        ]
## Remove user [/api/users/del]

Removing user from panel and OS. Removing all user databases, domains, files and etc.

+ Attributes
    + Name (required,string) - Username to remove.

### Success [POST]
If user exists and no `root` it will be successful removed.

+ Request (application/json)
        {  
            "Name":"Tester"
        }

+ Response 204 (text/plain)

### #Error [POST]
If user is not exists or root it will fail with error.

+ Request (application/json)
        {  
            "Name":"NotExistingUser"
        }

+ Response



# Group User defined settings
Users can change they gui themes and GUI languages. Alse user can change his password.
## Change user password [/api/user/password]

User can change his password for accessing panel and SSH (if ssh is allowed for him).

### Password change [POST]

+ Request (application/json)
        {
            "Password": "$USER_PASSWORD"
        }

+ Response 204 (text/plain)

## User defined settings change [/api/user/set]

User can change his gui theme, language and email for notifications.

+ Attributes
    + Email (required,string) - User email for messages and notifications.
    + Theme (required,string) - GUI theme.
    + Language (required, string) - Theme GUI language.


### User settings change [POST]

+ Request (application/json)
        {
         "Email":"newUserEmail@localhost",
         "Theme":"Simple",
         "Language":"EN"
        }

+ Response 204 (text/plain)



# Group Filemanager
Filemanager allow manipulating file system as root or as regular user.
Users canot modify files outside they home directory.
## Create new directory [/api/filemanager/mkdir]

Create new directory.
Owner can be set only by root user.

### Make dir by Root [POST]

+ Request (application/json)

        {
            "Dir":   "/var/www",
            "Mkdir": "new_test_dir",
            "Owner": "nobody"
        }

+ Response 204 (text/plain)

### Make dir by #User [POST]

+ Request (application/json)

        {
            "Dir":   "/www",
            "Mkdir": "new_user_test_dir"
        }

+ Response 204 (text/plain)
## Change permissions [/api/filemanager/set]

Root can change any files.
User can change only files within his homedirectory. Owner for modified files will be a current user.

### Change permissions by Root [POST]

+ Request (application/json)
        {
            "Path":  "/var/www/test.html",
            "Mode":  777,
            "Owner": 99,
            "Group": 3,
            "Recursive":true
        }

+ Response 204 (text/plain)


### Change permissions by #User [POST]

User can't change owner of the files, only permissions.

+ Request (application/json)
        {
            "Path":  "/test.html",
            "Mode":  777,
            "Recursive":true
        }

+ Response 204 (text/plain)


### Change permissions #Error by #User [POST]
User can't change files which not owned.

+ Request (application/json)
         {
            "Path":  "/from_root.html",
            "Mode":  777
        }

+ Response


### Change permissions #Error while file Not Exist by #User [POST]
User can't change files which not owned.

+ Request (application/json)
         {
            "Path":  "/dir_which/not_exist.txt",
            "Mode":  777
        }

+ Response

## Move file or folder [/api/filemanager/move]

Root can move any files or directories.
User can move only files within his homedirectory.

### Move by Root [POST]

+ Request (application/json)
        {
            "From":  "/var/www/new_test_dir",
            "To":  "/var/www/new_test_dir_moved"
        }

+ Response 204 (text/plain)

### Move by #User [POST]

+ Request (application/json)
        {
            "From":  "/www/new_user_test_dir",
            "To":  "/www/new_user_test_dir_moved"
        }

+ Response 204 (text/plain)

### Move #Error Unexist by #User [POST]

+ Request (application/json)
        {
            "From":  "/www/unexist_user_test_dir",
            "To":  "/www/unexist_user_test_dir_moved"
        }
        
+ Response


### Move #Error No Privileges by #User [POST]

+ Request (application/json)
        {
            "From":  "/dir_from_root",
            "To":  "/www/new_dir_from_root"
        }
        
+ Response
## Find files [/api/filemanager/find]

Root can search all files or directories.
User can search within his homedirectory.

### Find by by Root [POST]

+ Request (application/json)
        {
            "Dir":"/",
            "Find":"sudo"
        }

+ Response 200 (application/json)
        [
            "/usr/bin/sudo"
        ]

### Find by #User [POST]

+ Request (application/json)
        {
            "Dir":"/",
            "Find":"sudo"
        }

+ Response 200 (application/json)
        []
## Download files [/api/filemanager/download]

Download file from filesystem. Users can download only files from they homedir.

### Download file [POST]

+ Request (application/json)
        {
            "Filename": "/etc/passwd"
        }

+ Response 200 (application/octet-stream)
    + Headers
        Content-Disposition: "attachment; filename=passwd"
    + Body
            
            

### Download file by #User [POST]

+ Request (application/json)
        {
            "Filename": "/test.jpg"
        }

+ Response 200 (application/octet-stream)
    + Headers
        Content-Disposition: "attachment; filename=test.jpg"
        content-length: 13263
    + Body
            
            
        
### Download file #Error by #User [POST]

+ Request (application/json)
        {
            "Filename": "/../../../../etc/passwd"
        }

+ Response
## Download file from remote URL [/api/filemanager/wget]

Download file to directory from remote URL.
Status of download send to /api/info/actualizer websocket as BackgroundTasks.

### Download file by #User [POST]

+ Request (application/json)
        {
            "Dir":"/",
            "Url": "http://vds64.com/bigfile.tar.gz"
        }

+ Response 204 (text/plain)

### Download file url #Error by #User [POST]

+ Request (application/json)
        {
            "Dir":"/",
            "Url": "http://vds64.com/no/such.file"
        }

+ Response

### Download file permission #Error by #User [POST]

+ Request (application/json)
        {
            "Dir":"../../../../../etc",
            "Url": "http://vds64.com/bigfile.tar.gz"
        }

+ Response

### Download MySQL dump file by #User [POST]

+ Request (application/json)
        {
            "Dir":"/www/",
            "Url": "http://jenkins.geeks.team/mysql.sql"
        }

+ Response 204 (text/plain)

### Download PgSQL dump file by #User [POST]

+ Request (application/json)
        {
            "Dir":"/www/",
            "Url": "http://jenkins.geeks.team/pgsql.sql"
        }

+ Response 204 (text/plain)
## Create archive [/api/filemanager/pack]

Create new archive from directory. Supported types are `tar.gz`, `zip`.

### Create tar.gz archive [POST]

+ Request (application/json)
        {
            "Directory": "/var/www/html",
            "Type":      "tar.gz",
            "OutputDir": "/var/www/test_archives",
            "Archname":  "testTar"
        }

+ Response 204 (text/plain)

### Create zip archive [POST]

+ Request (application/json)
        {
            "Directory": "/var/www/html",
            "Type":      "zip",
            "OutputDir": "/var/www/test_archives",
            "Archname":  "testZip"
        }

+ Response 204 (text/plain)

### Create tar.gz archive by #User [POST]

+ Request (application/json)
        {
            "Directory": "/www",
            "Type":      "tar.gz",
            "OutputDir": "/www/test_archives",
            "Archname":  "testTar"
        }

+ Response 204 (text/plain)

### Create tar.gz archive #Error by #User [POST]

+ Request (application/json)
        {
            "Directory": "/www/dir_no_exist",
            "Type":      "tar.gz",
            "OutputDir": "/www/test_archives",
            "Archname":  "testTar"
        }

+ Response
## Extract archive [/api/filemanager/unpack]

Extract archive. Supported types are `tar.gz`, `zip`.

### Extract tar.gz archive [POST]

+ Request (application/json)
        {
            "Directory": "/var/www/test_archives",
            "Filename":  "testTar.tar.gz",
            "OutputDir": "/var/www/test_archives/tar"
        }

+ Response 204 (text/plain)

### Extract zip archive [POST]

+ Request (application/json)
        {
            "Directory": "/var/www/test_archives",
            "Filename":  "testZip.zip",
            "OutputDir": "/var/www/test_archives/zip"
        }

+ Response 204 (text/plain)

### Extract tar.gz archive by #User [POST]

+ Request (application/json)
        {
            "Directory": "/www/test_archives",
            "Filename":  "testTar.tar.gz",
            "OutputDir": "/www/test_archives/tar"
        }

+ Response 204 (text/plain)

### Extract tar.gz archive #Error by #User no such file [POST]

+ Request (application/json)
        {
            "Directory": "/www/test_archives",
            "Filename":  "no_such_archive.tar.gz",
            "OutputDir": "/www/test_archives/tar"
        }

+ Response

### Extract tar.gz archive #Error by #User output dir not exist [POST]

+ Request (application/json)
        {
            "Directory": "/www/test_archives",
            "Filename":  "testTar.tar.gz",
            "OutputDir": "/www/dir_not_exist/tar"
        }

+ Response
## Download directory as archive [/api/filemanager/getarchive]

Packs directory to tar.gz archive on the fly.

### Pack directory by Root [POST]

+ Request (application/json)
        {
            "Directory": "/etc/selinux"
        }
        
+ Response 200 (application/zip)
    + Headers
        Content-Disposition: "attachment; filename=selinux.zip"
    + Body

### Pack directory by #User [POST]

+ Request (application/json)
        {
            "Directory": "/ftpdir"
        }
        
+ Response 200 (application/zip)
    + Headers
        Content-Disposition: "attachment; filename=ftpdir.zip"
    + Body

### Pack directory #Error by #User [POST]
Permission denied error.

+ Request (application/json)
        {
            "Directory": "../../../../etc/selinux"
        }
        
+ Response 
## Show text file [/api/filemanager/showfile]

User can view text files.

### Show file by Root [POST]

+ Request (application/json)
        {
            "Filename": "/etc/passwd",
            "Encoding": "ISO 8859-2"
        }
        
+ Response 200 (application/json)
        {
            "Text":"text of the file"
        }

### Show file #Error not exist [POST]

+ Request (application/json)
        {
            "Filename": "/etc/no_such_file",
            "Encoding": "ISO 8859-2"
        }
        
+ Response

### Show file by #User [POST]

+ Request (application/json)
        {
            "Filename": "/test.html",
            "Encoding": "ISO 8859-2"
        }
        
+ Response 200 (application/json)
        {
            "Text":"text of the file"
        }

### Show file #Error by #User permission denied [POST]
User can view only user owned files.

+ Request (application/json)
        {
            "Filename": "../../../etc/passwd",
            "Encoding": "ISO 8859-2"
        }
        
+ Response

### Show file #Error not text file format [POST]
Show file work only with text files 1Mb size maximum.

+ Request (application/json)
        {
            "Filename": "/usr/bin/vim",
            "Encoding": "ISO 8859-2"
        }
        
+ Response
## Edit text file [/api/filemanager/editfile]
Users can edit text file content.

### Edit text file by Root [POST]

+ Request (application/json)
        {
            "Filename": "/var/www/test.html",
            "Encoding": "ISO 8859-2",
            "Text":"<h2>Root was here!</h2>"
        }
        
+ Response 204 (text/plain)

### Edit text file by #User [POST]
User can edit only owned files in his homedir.

+ Request (application/json)
        {
            "Filename": "/test.html",
            "Encoding": "ISO 8859-2",
            "Text":"<h2>$USER_NAME was here!</h2>"
        }
        
+ Response 204 (text/plain)

### Edit text file #Error by #User [POST]

+ Request (application/json)
        {
            "Filename": "/from_root.html",
            "Encoding": "ISO 8859-2",
            "Text":"Edit by regular User"
        }
        
+ Response 
## Delete file or folder [/api/filemanager/del]

Root can delete all files or directories.
User can delete only files within his homedirectory and owned by him.

### Delete Dir by Root [POST]

+ Request (application/json)
        [
            "/var/www/new_test_dir_moved"
        ]

+ Response 204 (text/plain)

### Delete Dir by #User [POST]

+ Request (application/json)
        [
            "/www/new_user_test_dir_moved"
        ]

+ Response 204 (text/plain)

### Delete file by Root [POST]

+ Request (application/json)
        [
            "/var/www/test_archives/testTar.tar.gz"
        ]

+ Response 204 (text/plain)

### Delete file by #User [POST]

+ Request (application/json)
        [
            "/www/test_archives/testTar.tar.gz"
        ]

+ Response 204 (text/plain)

### Delete #Error Unexist by #User [POST]

+ Request (application/json)
        [
            "/www/unexist_user_test_dir"
        ]
        
+ Response

### Delete #Error No Privileges by #User [POST]

+ Request (application/json)
        [
            "/dir_from_root"
        ]
        
+ Response

### Delete #Error Outside homedir #User [POST]

+ Request (application/json)
        [
            "/../../../etc/issue"
        ]
        
+ Response
## List directory [/api/filemanager/list]

Root can list all directories on server.
User can list only directories under his homedir.

### List dir by Root [POST]

+ Request (application/json)
        {
            "Dir": "/var/www"
        }

+ Response 200 (application/json)
    + Attributes (array[Files])

### List dir by #User [POST]

+ Request (application/json)
        {
            "Dir": "/www"
        }

+ Response 200 (application/json)
    + Attributes (array[Files])

### List dir #Error by #User [POST]

+ Request (application/json)
        {
            "Dir": "/../../../usr/bin"
        }

+ Response



# Group FTP accounts
PFTPD server accounts.
## Add or Edit FTP account [POST /api/pftpd/set]

Add or edit FTP accounts.

+ Attributes
  + UserID (required, string) - FTP account login name.
  + Password (required, string) - FTP account password.
  + User (optional, string) - Panel user which owns FTP account. Only `root` can set User.
  + Homedir (required, string) - FTP directory path related to current user's homedir.

+ Request (application/json)
    {
        "UserID":     "FTP1",
        "Password" : "FTPPassword",
        "Homedir":       "/www/$TESTING_DOMAIN/"
        }

+ Response 204 (text/plain)

## List FTP accounts [GET /api/pftpd/list]

List all user's FTP account.

+ Response 200 (application/json)
    [
        {  
       "UserID":"$USER_NAME_FTP1",
           "Homedir":  "/www/$TESTING_DOMAIN/"
        }
    ]

## Remove FTP accounts [POST /api/pftpd/del]

Remove FTP accounts.

+ Request (application/json)
    ["FTP1"]

+ Response 204 (text/plain)

## Remove non existent ftp account #Error [POST /api/pftpd/del]

+ Request (application/json)
    ["FTPNotExist"]

+ Response



# Group Web Domains
Nginx and apache domains.
## Add or Edit Web domain [/api/webdomains/set]

Add new or edit web domain.

+ Attributes
  + Domain (required, string) - Web domain name.
  + Alias (required, string) - Domain aliases.
  + IP (required, string) - IP address to bind web domain.
  + IndexFile (required, string) - Index file.
  + Encoding (required, string) - Encoding for the files.
  + Subdomains (required, boolean) - Auto subdomains.
  + PHP (required, string) - PHP interpreter.
  + DNS (required, boolean) - Add domain to DNS server too.
  + SSL (required, boolean) - HTTPS support.
  + Analytics (required, boolean) - Domain analytics.

### Add new or edit web domain [POST]

+ Request (application/json)
    {  
       "Name":"testDomain.com",
       "Alias":"www.testDomain.com site.testDomain.com",
       "IP":"$SERVER_IP",
       "IndexFile":"index.html",
       "Encoding":"utf8",
       "Subdomains":true,
       "PHP":"fpm_nginx",
       "DNS":true,
       "SSL":false,
       "Analytics":true,
       "Active":true
    }

+ Response 204 (text/plain)

## Toggle active web domains [/api/webdomains/toggle]

Activate or deactivate (if domain active) web domains in request.
Disabled domains will not be served from webserver.

### Toggle active web domains [POST]

+ Request (application/json)
    [  
       "testDomain.com"
    ]

+ Response 204 (text/plain)

### Toggle non existent web domain #Error [POST]

+ Request (application/json)
    [  
       "notExistingDomain.com"
    ]

+ Response

## List all web domains [/api/webdomains/list]

List all web domains of current user.

+ Attributes
  + Active (required, boolean) - Is domain active.
  + Apache (required, array) - Apache config parameters.
  + Nginx (required, array) - Nginx config parameters.

### List web domains [GET]

+ Response 200 (application/json)
        [
            {  
                "Name":"testDomain.com",
                "Active":true,
                "Owner":"regular_User",
                "Alias":"www.testDomain.com site.testDomain.com",
                "IP":"$SERVER_IP",
                "IndexFile":"index.html",
                "Encoding":"utf8",
                "Subdomains":true,
                "PHP":"fpm_nginx",
                "SSL":false,
                "Analytics":true
            }
        ]

## Remove web domains [/api/webdomains/del]

Remove web domains.

### Remove web domains [POST]

+ Request (application/json)
    [  
       "testDomain.com"
    ]

+ Response 204 (text/plain)

### Remove non existent web domain #Error [POST]

+ Request (application/json)
    [  
       "notExistingDomain.com"
    ]

+ Response

## PHP modes [/api/webdomains/set]

Domain has a four different modes: fpm_nginx, fpm_apache, mod_php, off

+ Attributes
  + PHP (required, string) - PHP interpreter mode.

### PHP-FPM on Nginx [POST]

+ Request (application/json)
    {  
       "Name":"$TESTING_DOMAIN",
       "Alias":"www.$TESTING_DOMAIN site.$TESTING_DOMAIN",
       "IP":"$SERVER_IP",
       "IndexFile":"index.html",
       "Encoding":"utf8",
       "Subdomains":true,
       "PHP":"fpm_nginx",
       "DNS":true,
       "SSL":false,
       "Analytics":true,
       "Active":true
    }

+ Response 204 (text/plain)

### PHP-FPM on Apache [POST]

If .htaccess needed.

+ Request (application/json)
    {  
       "Name":"$TESTING_DOMAIN",
       "Alias":"www.$TESTING_DOMAIN site.$TESTING_DOMAIN",
       "IP":"$SERVER_IP",
       "IndexFile":"index.html",
       "Encoding":"utf8",
       "Subdomains":true,
       "PHP":"fpm_apache",
       "DNS":true,
       "SSL":false,
       "Analytics":true,
       "Active":true
    }

+ Response 204 (text/plain)

### Apache mod_php [POST]

+ Request (application/json)
    {  
       "Name":"$TESTING_DOMAIN",
       "Alias":"www.$TESTING_DOMAIN site.$TESTING_DOMAIN",
       "IP":"$SERVER_IP",
       "IndexFile":"index.html",
       "Encoding":"utf8",
       "Subdomains":true,
       "PHP":"mod_php",
       "DNS":true,
       "SSL":false,
       "Analytics":true,
       "Active":true
    }

+ Response 204 (text/plain)

### PHP off [POST]

Disable php on domain

+ Request (application/json)
    {  
       "Name":"$TESTING_DOMAIN",
       "Alias":"www.$TESTING_DOMAIN site.$TESTING_DOMAIN",
       "IP":"$SERVER_IP",
       "IndexFile":"index.html",
       "Encoding":"utf8",
       "Subdomains":true,
       "PHP":"off",
       "DNS":true,
       "SSL":false,
       "Analytics":true,
       "Active":true
    }

+ Response 204 (text/plain)




# Group SSL Certificates
SSL certificates for domains
## Create CSR [POST /api/ssl/createcsr]

Creating SSL CSR and Key file.
Regular user must add domain to WebDomains to own this domain name.

+ Attributes
    + Domains (required,string) - Domains name for certificate.
    + City (required,string) - City name for CSR.
    + State (required,string) - State of the city.
    + Country (required,string) - Two symbols country code.
    + Company (required,string) - Company full name.
    + Division (required,string) - Division of the company.
    + Email (required,string) - Contact email.
    + Passphrase (required,string) - Password for private key. Leave empty for correct apache using.


+ Request (application/json)
        {  
           "Domains":"$TESTING_DOMAIN",
           "City":"NewYork",
           "State":"NY",
           "Country":"UA",
           "Company":"Geeks inc.",
           "Division":"IT",
           "Email":"test@domain.com",
           "Passphrase":"qwerty"
        }

+ Response 200 (application/json)
        {
        "Key":"Private key",
        "CSR":"Certificate request"
        }

## Generate self sighned certificate [POST /api/ssl/generate]

Generating self-signed certificate on CSR and KEY which already ben generated or imported.

+ Request (application/json)
        {  
           "Domain":"$TESTING_DOMAIN"
        }

+ Response 200 (application/json)
        {
        "Crt":"certificate"
        }

## Generation certificate #Error [POST /api/ssl/generate]

If no KEY or (and) CSR are exists for domain, there will be an error.

+ Request (application/json)
        {  
           "Domain":"testNotExistent.com"
        }


+ Response

## List all certificates [GET /api/ssl/list]

List SSL information for user's domains.

+ Response 200 (application/json)
        [  
           {  
              "Name":"$TESTING_DOMAIN",
              "Key":true,
              "CSR":true,
              "CRT":false
           }
        ]

## Getting all certificate info [POST /api/ssl/getcert]

Getting all information about certificate, keys and etc.

+ Request (application/json)
        {  
           "Domain":"$TESTING_DOMAIN"
        }

+ Response 200 (application/json)
        {  
           "PrivateKey":"...",
           "CSRKey":"...",
           "CRTKey":"...",
           "IssueDate":"2009-09-01 13:32:12",
           "ExpireDate":"2009-09-01 13:32:12",
           "CRTInfo":{  
              "Domains":"domain.com",
              "City":"Kiev",
              "State":"Kiev"
           }
        }

## Removing certificate [POST /api/ssl/del]

While removing certificate from domain, `Webdomain` SSL will set to `FALSE`

+ Request (application/json)
        [
           "$TESTING_DOMAIN"
        ]

+ Response 204 (text/plain)

## Import certificate [POST /api/ssl/import]

Import CSR, Key, CRT for domain.

+ Request (application/json)
        {  
           "Domain":"$TESTING_DOMAIN",
           "Key":"-----BEGIN PRIVATE KEY-----MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDo+UyURQKUPMYvGf+ISHDR8QNwOwdoB0NMOhXbXFyK29XAFzoiAqNCXtwQLP+kxXeTKslGhJ9L25xPNT9bQOQCPYp2Bd7TOqGa5AUQS+/PyP57i7p9Q8HV75ruEk693j4DWnq4dZtnYP4M6RgcPtbLM09awvR0hoe3a+lzEgpJr++puCpEf7sZZQq2QHhoKY4bsvh2jvvQVSQEIxOLoIYENrKvCHznGixGpwULchdmKytn5pwFAa0YjzDSWczzqwRcGQTIiKEjtQwcQ8jLnuUGEZNzhtfVVUd7rHB8Seh4wlgi1m4X2DEpwbFXQREbJ9yonqKTJAVtGULhg753m2j9AgMBAAECggEBAI5uk832HuyH91Ymm94zA56mrcZ4oD+OaSt6O5Cf+AgA/L5ytNzEJhHWss3E5QpUm5VCzEkrncQf4IFgeXqNwphIDZW4YxFawCBVFW9wLY4oQMVBmOMqgKAN2/d/A9r6u4kLUQnjBP6AAvHbtBzYojMbDIHdvNxcvy55cAEk31tKZNvN8SBPOniHvcitU8LVMeZSC+9fq+5jNALed6G8P60CR85ixnvDfCRoR1CeY1IwKjty978a08jm41c2tolo4qY3eM63WBnZsX8Ip8t6DGnjucggNYToaDiOKq/McAIiOLFxbNF+j7GZQTniWVr76KM6smOn2pQfDxE+RojHHkECgYEA/562mfS+AZUQONFoA/tFvkwltp2OTCIT36/Sj01ruSHr/0U7K/Ms2QlRvaUWdliZZ3n/XZOEmQR4SkZ5pr7s8iSJg8KJHbGumwTe5RYbuiwe8Rz1Winuvb9n7neEaPSbRMofENJFUURCJekrcqyxQP2q5vtoan/3tUAx7e/UF5ECgYEA6VH3iHA2TH90ds4wOMYam6u4j+9a3obRwH+ePTslg7ZJ+uLX8ufDFGhtHoCqIN+leuOqlszqcDhjnyh6GDZyGh60llso+y36/w6TbiOC82sPhbIlbLFCjx8wzT8XmhEFvMEpTzWeAotsFyGRpXoNQ4UoQVgRfRajZTWjeKHpvK0CgYA+3NRBNlwH3ZW4s17mI8Q6EVXw+/xDotnKV93rWfnU9I+qHmd33ny3/z+36MKGZjGLrgfsBlxEmUHP2lcOd8OjpPKgkZXQ1KKBAwihw/cbqMAPQbTg8JEC3vB7R68rdIQ+vYo4Q83CN4wg8J+7utZ4iimeVlOOZVwQmfHtdt5s0QKBgQCvlBU4wWi7LHbSKNu0/a9sUk9zUWYKa15RBDhqT6YtdfI6MJbdnnb5VpQ3Dg/46RQ4ZDctgEsz49tkHCu1KNO4wD6Zn0Q5sSJe6fMcQPD8iSaHL8ZmAwbZeVlaOw5hzEmK/7k8eFbOB2lyBrr50d1FYGEou0N95JlVQoYf84hXiQKBgHgGogCVQl7iSAX1VoSOTl/rzAg+wi4gW7Eb1oHjpj/OR9uWfET3JRCmNLfDruV9Nc3iu5/2F0L63yTrBT+XYKvLPi33pE9juPBw6mWVFe0fv4HgEtrCW7ZJV+bWwEWZand8xrqxYiagQFjvSuSXBoncfkSs/YJS65Jc10N9f32O-----END PRIVATE KEY-----",
           "Crt":"-----BEGIN CERTIFICATE-----MIID0zCCArugAwIBAgIBADANBgkqhkiG9w0BAQsFADCBgzELMAkGA1UEBhMCVUExEDAOBgNVBAgMB0toYXJrb3YxEDAOBgNVBAcMB0toYXJrb3YxEjAQBgNVBAoMCUdlZWtzdGVhbTELMAkGA1UECwwCSVQxETAPBgNVBAMMCHRlc3QuY29tMRwwGgYJKoZIhvcNAQkBFg10ZXN0QHRlc3QuY29tMB4XDTE2MDMyNDA5MDczM1oXDTE3MDMyNDA5MDczM1owgYMxCzAJBgNVBAYTAlVBMRAwDgYDVQQIDAdLaGFya292MRAwDgYDVQQHDAdLaGFya292MRIwEAYDVQQKDAlHZWVrc3RlYW0xCzAJBgNVBAsMAklUMREwDwYDVQQDDAh0ZXN0LmNvbTEcMBoGCSqGSIb3DQEJARYNdGVzdEB0ZXN0LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOj5TJRFApQ8xi8Z/4hIcNHxA3A7B2gHQ0w6FdtcXIrb1cAXOiICo0Je3BAs/6TFd5MqyUaEn0vbnE81P1tA5AI9inYF3tM6oZrkBRBL78/I/nuLun1DwdXvmu4STr3ePgNaerh1m2dg/gzpGBw+1sszT1rC9HSGh7dr6XMSCkmv76m4KkR/uxllCrZAeGgpjhuy+HaO+9BVJAQjE4ughgQ2sq8IfOcaLEanBQtyF2YrK2fmnAUBrRiPMNJZzPOrBFwZBMiIoSO1DBxDyMue5QYRk3OG19VVR3uscHxJ6HjCWCLWbhfYMSnBsVdBERsn3KieopMkBW0ZQuGDvnebaP0CAwEAAaNQME4wHQYDVR0OBBYEFEkE8dr8y/aDEEjNJkwtalK1DkNRMB8GA1UdIwQYMBaAFEkE8dr8y/aDEEjNJkwtalK1DkNRMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAK3aFK/jdULddAbFb79/BnrKwBO+DmJljOGMUZZWGer/r5IX91MLk8yprvQva0ebafh7DzNDlQWCHps2sfsJ83Su7gywrFL8tmTmShcEQpX9xJToHsYasw0to8Gh2hN2HBL6588iyYt0bJW9PMDEvu6P/MJs77zWuh50z9xO+7mXuc4bk3F2A5UisAxt+zvbZCEWCjoDhHTlUYFv0OLJ5/6HNhk7s5ZjKp43NXRtsntyoLJeCUzb3qxmKNIVw9a7ineMIN3Qykm2AUjzZL/tdccZ0YeqsbSdHOV03XodM9VIsSqj0AZQ3cxLvgv0s9xcniRqEhVs1qHYKjfrVhpjyBI=-----END CERTIFICATE-----",
           "Csr":"-----BEGIN CERTIFICATE REQUEST-----MIICqjCCAZICADBmMQswCQYDVQQGEwJVQTERMA8GA1UEAxMIdGVzdC5jb20xEDAOBgNVBAcTB0thaHJrb3YxEzARBgNVBAoTCkdlZWtzLlRlYW0xEDAOBgNVBAgTB0toYXJrb3YxCzAJBgNVBAsTAklUMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAox7xBJVm0k59RuLlRs+c7VSHsD4GH8xU8Dk+0HxhQ7CZsz2W8i1TM/T/4AfrWztDlOGBro3ey9JmtDANMfoGjHF82MqZwHKCJePPWEUDhH6jPKurtRlRaPKymxoKl4xB1mWeIJXu5VaAklfi4BqeavDnARWA03/wUE3/H9fUpK7k98LXEDJ/AgKALICG7++5llEXrnDkbW3ofNRpp/r1Z/ZxtNaxGn0Toplt/tLBZWSbkMYmqF6HQm6hND88xN+Ufex+kStWiOglytmYz2c2XhnsUx+xV8+1MUjkMc+Itg+6ncLg60qgXCOKyHleQ1lAKZaHkUhX/Q9mz+Q+PW7lkQIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAE56UIb2alhJghxPUKuI6/B7QCE6W01zx2MJSbCk3+9eWUwFQFoFy3NQJWKn0wE0788PAKiQ1dZ0joIsTaWlX5xW79aDK/Od8McpCqNNDmuCJKHtd8SWnp3WnXjD9KPPM+CEYpFOgo8CYxRjMqckOGXbW/z9gs2Zuehwb2YK3horyf0MoaxtppYjDOo0G7yF79aTgaqKromKrOv1+Pr4/f86/QJCx+6T9Eht6sdONH2PQVH58V0a10Di2GtpRDys7oQFP4lBnTUBkRnnTnhJ7o7fEbNmFJnKutpe7XcfTmN40+4ybqCGfHiqBo4/GCLXGVpJitYV2ISjahY2u7us0+g=-----END CERTIFICATE REQUEST-----"
        }

+ Response 204 (text/plain)



# Group PHP
PHP settings and information.
## PHPinfo [GET /api/php/info]

Output phpinfo().

+ Attributes
  + Version (required, string) - Current PHP version.
  + Modules (required, array) - Loaded PHP modules.
  + Ini (optional, array) - Loaded ini files.
  + FullInfo (required, array) - Other information.

+ Response 200 (application/json)
        {
            "Version":"5.3.1",
            "Modules":
            [
                "mysql",
                "sqlite3"
            ],
            "FullInfo":
            [    
                "Phar: PHP Archive support => enabled",
                "Phar EXT version => 2.0.1"
            ],
            "Ini":
            [
                "/etc/php.d/bcmath.ini",
                "/etc/php.d/opcache.ini"
            ]
        }

## Set INI parameter [POST /api/php/iniset]

Sets ini parameters.

+ Request (application/json)
        {
            "allow_url_fopen":"Off"
        }

+ Response 204 (text/plain)

## List INI settings [GET /api/php/inilist]

Lists all active ini settings.

+ Response 200 (application/json)
        {
            "allow_url_fopen": "Off"
        }
## Search PECL packages [POST /api/php/peclsearch]

Searches for the mentioned pecl packages and output information about them.

+ Request (application/json)

        ["opcache","sqlite"]

+ Response 200 (application/json)
        [
            {
                "Name":        "opcache",
                "Version":     "0.9.1",
                "Description": "Zend OpCache cache"
            }
        ]

## Install PECL packages [POST /api/php/peclinstall]

Installing pecl packages.

+ Request (application/json)

        ["SQLite"]

+ Response 200 (application/json)
        {
            "Output":"text from console"
        }
        
## Remove PECL packages [POST /api/php/peclremove]

Removing pecl packages.

+ Request (application/json)

        ["ZendOpcache","SQLite"]

+ Response 200 (application/json)
        {
            "Output":"text from console"
        }



# Group MySQL Users
Panel users can have their own database users and databases.
Database can be on local host and remote. Database connection can be configured by `Mysql.Host`, `Mysql.Port`, `Mysql.User` (Root or admin database user), `Mysql.Password` (Password for root or database admin) section at main config file.
## Modifying users [POST /api/mysql/users/set]

Add or edit database user if username already exist.

+ Attributes
  + Username (required, string) - Database username. Prefix must be panel user name, and append in GUI before request.
  + Password (required, string) - Database user password.
  + Host:localhost (optional, string) - Hostname  from which user can login to database.

+ Request (application/json)

        {  
           "Username":"DBU",
           "Password":"NewMyDBPassword",
           "Host":"localhost"
        }

+ Response 204 (text/plain)

## Get all users  [GET /api/mysql/users/list]

List all database users owned by the current session panel user.

+ Attributes
  + DBs (required, number) - Number of user's databases. 

+ Response 200 (application/json)

        [  
           {  
              "Username":"Testuser_DBU",
              "Host":"localhost",
              "DBs":0
           }
        ]

## Removing users [POST /api/mysql/users/del]

Removing MySQL user and all him databases. If `ReplaceBy` parameter, databases not be deleted, they transfered to DB username in request instead.

+ Attributes
  + ReplaceBy (required, string) - Database username to transfer all databases from removing database user.

+ Request (application/json)

        {  
        "Username":"DBU"
        }

+ Response 204 (text/plain)

## Removing non existent user #Error [POST /api/mysql/users/del]

+ Request (application/json)

        {  
        "Username":"DBuser2"
        }

+ Response



# Group PgSQL Users
Panel users can have their own database users and databases.
Database can be on local host and remote. Database connection can be configured by `Pgsql.Host`, `Pgsql.Port`, `Pgsql.User` (Root or admin database user), `Pgsql.Password` (Password for root or database admin) section at main config file.
## Modifying users [POST /api/pgsql/users/set]

Add or edit database user if username already exist.

+ Attributes
  + Username (required, string) - Database username. Prefix must be panel user name, and append in GUI before request.
  + Password (required, string) - Database user password.

+ Request (application/json)
        {  
       "Username":"DBuser1",
       "Password":"NewMyDBPassword"
    }

+ Response 204 (text/plain)

## Get all users  [GET /api/pgsql/users/list]

List all database users of current session panel user.

+ Attributes
  + DBs (required, number) - Number of user's databases. 

+ Response 200 (application/json)
    [  
       {  
          "Username":"Testuser_DBuser1",
          "DBs":99
       }
    ]

## Removing users [POST /api/pgsql/users/del]

Removing PgSQL user and all him databases. If `ReplaceBy` parameter, databases not be deleted, they transfered to DB username in request instead.

+ Attributes
  + ReplaceBy (required, string) - Database username to transfer all databases from removing database user.

+ Request (application/json)
        {  
       "Username":"DBuser1"
    }

+ Response 204 (text/plain)



# Group DNS Domains
DNS Domains
## Add or Edit DNS domain records [POST /api/pdns/set]

Add or edit DNS domain records

+ Attributes
  + Id (required, number) - ID of domain in pdns database.
  + Name (required, string) - Domain name.
  + Records (required, object) - DNS records for domain.

+ Request (application/json)
        {  
           "Name":"testpdns.com",
           "Type":"NATIVE",
           "Records":[
              {  
                 "Name":"testpdns.com",
                 "Type":"SOA",
                 "Content":"ns1.dnsimple.com admin.testpdns.com 2016022001 86400 7200 604800 300",
                 "TTL":86400
              },
              {  
                 "Name":"www.testpdns.com",
                 "Type":"A",
                 "Content":"77.222.142.3",
                 "TTL":86400
              },
              {  
                 "Name":"testpdns.com",
                 "Type":"A",
                 "Content":"77.222.142.3",
                 "TTL":86400
              },
              {  
                 "Name":"testpdns.com",
                 "Type":"MX",
                 "Content":"aspx.gmail.com",
                 "TTL":86400,
                 "Prio":10
              }
           ]
        }

+ Response 204 (text/plain)

## Edit DNS domain #Error [POST /api/pdns/set]

Error while edit not existent domain or domain not owned by the user.

+ Request (application/json)
        {  
          "ID":999,
          "Name":"notExistentDomain.com",
          "Type":"NATIVE",
          "Records":[  
            {  
               "Name":"www.testpdns.com",
               "Type":"A",
               "Content":"77.222.142.3",
               "TTL":86400
            }
          ]
        }

+ Response

## List Domains records [GET /api/pdns/list]

List all domains and they records.

+ Response 200 (application/json)
    [
       {
          "ID":124,
          "Name":"testpdns.com",
          "Type":"NATIVE",
          "Account":502,
          "Records":[
             {
                "Name":"www.domain.com",
                "Type":"A",
                "Content":"77.222.142.3",
                "TTL":"86400",
                "Prio":"10"
             }
          ]
       }
    ]

## Delete domain [POST /api/pdns/del]

Remove domain and it records form PDNS database.

+ Request (application/json)
        [  
          "testpdns.com"
        ]

+ Response 204 (text/plain)

## Delete domain #Error [POST /api/pdns/del]

Error while removing non existent or not user owned domain.

+ Request (application/json)
        [  
          "notExistentDomain.com"
        ]

+ Response



# Group Domains statistics

ServerPanel gather ***Domains*** and ***URLs*** hits statistics directly from webserver and DNS.

There is no need to analyze large `access.log` files to retrieve web sites statistic. Its available at any time with minute delay.

> Statistics for websites stores at panel database for ***30 days*** period by default.

`Administrator` and `Users` can retrieve those statistics for all domains and filter it by particular urls and date interval.

![Domain statistics diagram](https://raw.githubusercontent.com/geeksteam/SHM-api-blueprint/master/images/NgStat.svg "Domain Statistic diagram")
## All domains statistic [/api/ngstat/get]

`Root` user (or Administrator) get count of hits for all domains at the server sorted by date interval.

As a response you'll get `Dates` objects with `Domain:hits` as a values.


### Get stats [POST]

Root will get stats for all Domains.

+ Attributes (DateInterval)

+ Request (application/json)

        {
            "From":"$DATE_YMD",
            "To":"$DATE_YMD"
        }

+ Response 200 (application/json)

            {  
                "$DATE_YMD":{  
                    "$TESTING_DOMAIN":6
                }
            }


### Get domains stats by #User [POST]
User will get stats only for his Domains.

+ Attributes (DateInterval)

+ Request (application/json)

        {  
            "From":"$DATE_YMD",
            "To":"$DATE_YMD"
        }

+ Response 200 (application/json)

            {  
                "$DATE_YMD":{  
                    "$TESTING_DOMAIN":6
                }
            }


## Statistic by URLs for Domain [/api/ngstat/getdomain]

Get URLs with count of hits for Domain and date interval.

As a response you'll get `Date` objects with `URL/path:hits` as value.


### Get URLs stats for Domain by #User [POST]

User can get stats for his Domains only.

+ Attributes (DomainStats)

+ Request (application/json)

        {  
            "From":"$DATE_YMD",
            "To":"$DATE_YMD",
            "Domain":"$TESTING_DOMAIN"
        }

+ Response 200 (application/json)

            {  
                "$DATE_YMD":{  
                    "$TESTING_DOMAIN/path1/index.html":1,
                    "$TESTING_DOMAIN/path2/index.html":3
                }
            }


## URLs statistics by Date [/api/ngstat/geturl]

Get URL statistic by dates and hits count.

As a response you'll get `Date:hits` array.


### Get stats by Dates for URL path as #User [POST]
+ Attributes (UrlStats)

+ Request (application/json)

        {  
            "From":"$DATE_YMD",
            "To":"$DATE_YMD",
            "Url":"$TESTING_DOMAIN/path2/index.html"
        }

+ Response 200 (application/json)

            {
            }
## Data Structures

### DateInterval
+ From (required, string) - Date from show statistic in 2099.12.31 format.
+ To (required, string) - Date to show statistic in 2099.12.31 format.

### DomainStats
+ Date Interval
+ Domain (required, string) - For which domain show statistics for urls pathes.

### UrlStats
+ Date Interval
+ Url (required, string) - For which url show dates and count statistic.



# Group Nginx
Nginx web server status page.
## Get nginx status [GET /api/nginx/status]
Getting nginx status information page.

+ Response 200 (application/json)
            {  
            "hostname":"vds",
            "server_version":"1.8.0",
            "basic_status":{  
                "active_connections":1,
                "server_accepts":2,
                "handled":2,
                "requests":2,
                "reading":0,
                "writing":1,
                "waiting":0
            },
            "requests":[  
                    {  
                        "client":"45.78.13.21",
                        "vhost":"93.58.28.25",
                        "request":"GET /handler HTTP/1.1",
                        "mode":"W",
                        "status":200
                    }
                ]
            }



# Group Watchdog Statistics
Watchdog statistics
## Disk space analyzer [GET /api/watchdog/diskanalyzer]
Disk space analyzer results.


+ Response 200 (application/json)
            {  
                "DiskAnalyzer":[  
                    {  
                        "Date":"Tue Nov 17 13:43:14 EET 2015",
                        "Content":{}
                    }
                ]
            }

## Background process killer [GET /api/watchdog/prockiller]
Background process killer statistic.


+ Response 200 (application/json)
            {  
                "ProcKiller":[  
                    {  
                        "Process":"Fri Nov 13 16:06:52 EET 2015",
                        "Killed":"bounce"
                    }
                ]
            }
## Getting System usage chart [GET /api/watchdog/chart]

+ Request (application/json)
            {  
                "Get":"SysStat",
                "Date":{  
                    "From":"$DATE_YMD 10:15",
                    "To":"$DATE_YMD 17:55",
                    "EntriesCount":24
                }
            }

+ Response 200 (application/json)
            {  
                "labels":[],
                "datasets":[
                    {  
                        "label":"CPU",
                        "data":[]
                    },
                    {  
                        "label":"RAM",
                        "data":[]
                    },
                    {  
                        "label":"SWAP",
                        "data":[]
                    },
                    {  
                        "label":"HDD",
                        "data":[]
                    },
                    {  
                        "label":"WA",
                        "data":[]
                    }
                ]
            }

## Getting Network usage chart [GET /api/watchdog/chart]

+ Request (application/json)
            {  
                "Get":"NetStat",
                "Date":{  
                    "From":"$DATE_YMD 10:15",
                    "To":"$DATE_YMD 17:55",
                    "EntriesCount":24
                }
            }

+ Response 200 (application/json)
            {  
                "labels":[],
                "datasets":[
                    {  
                        "label":"InMbitps",
                        "data":[]
                    },
                    {  
                        "label":"InPps",
                        "data":[]
                    },
                    {  
                        "label":"OutMbitps",
                        "data":[]
                    },
                    {  
                        "label":"OutPps",
                        "data":[]
                    }
                ]
            }

## Getting Traffic usage chart [GET /api/watchdog/chart]

+ Request (application/json)
            {  
                "Get":"Traffic",
                "Interface":"venet0",
                "Date":{  
                    "From":"$DATE_YMD 10:15",
                    "To":"$DATE_YMD 17:55",
                    "EntriesCount":24
                }
            }

+ Response 200 (application/json)
            {  
            "labels":[],
            "datasets":[  
                    {  
                        "label":"In",
                        "data":[]
                    },
                    {  
                        "label":"Out",
                        "data":[]
                    }
                ]
            }



# Group Remove Test environment
Remove test environment.

## Remove dirs for ZIP archive testing as Root [POST /api/filemanager/del]

+ Request (application/json)
        [
            "/var/www/test_archives/zip"
        ]

+ Response 204 (text/plain)

## Remove dirs for TAR archive testing as Root [POST /api/filemanager/del]

+ Request (application/json)
        [
            "/var/www/test_archives/tar"
        ]

+ Response 204 (text/plain)



# Group Logout

To close current session user can logout by request. This is not necessary but recommended to close the session.
If user is inactive for 1800 seconds, session will be destroyed by the panel itself. 
You can change this value in config file at `GHttp.SessionLifeTime`.

## #User logout [GET /logout]
Close the regular user session.

+ Response 204 (text/plain)

## Root logout [GET /logout]
Administrator `root` session close.

+ Response 204 (text/plain)



